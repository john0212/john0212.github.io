[{"categories":["個人筆記"],"contents":"4-2 章 Http 協議 負責規定資料的傳輸格式，讓前後端能夠有效的進行資料溝通，可以分成 request (請求) 和 response (回應)\n4-3 章 @RequestMapping 用法:加在 class 上或方法上，小括號裡填寫 url 路徑 用途:將 url 路徑對應到方法上 @Controller/@RestController 用法:只能加在 class 上 用途:將該 class 變成 bean，並且可以使用 @RequestMapping 可以想像成 @Component 的強化版 4-4 章 Json 格式 “id”(Key):123(Value) Key 一定要有雙引號，只要不知道 Value 是甚麼，都可以用 null 來取代 {} 表示一個 object [] 表示一個 array 4-5 章 4-7 章 如果再參數前面加上@RequestParam 後，在 url 上一定要帶上這些帶有@RequestParam 參數(不然會出錯，除非有加上 require 或 defaultValue)，但多帶其他沒有設定的參數沒關係\n@RequestParam 用法:只能加在方法的參數上 用途:取得 url 裡面的參數 @RequestParam 可使用設定 name(or value):指定 url 參數的名字，不過不常用，通常會以參數名稱為名字就好 required:是否是必須的參數? 預設是 true，可以改成 false defaultValue:required=false 的加強版，提供預設值 4-8 章 用 GET 方法的話只能把參數加在 url 後面，那如果我們想把參數寫在 request body 裡的話，就要使用 POST 方法\n@RequestBody 用法:只能加在方法的參數上 用途:取得 request body 裡面的參數 (將 Json 轉為 Java object) 加上 @RequestBody 後，Spring boot 就會把放在 request body 裡面的 Json 格式的參數，去轉換成我們自定義的 class，再透過這個 class 的 getter 方法去取得相對應的參數\n在 request body 裡面，要傳幾個 Json 的參數給後端都是可以的，Spring boot 只會在意在這個方法中這個 class 有定義的變數而已，多傳的 key 就會直接被丟掉，那如果有定義的 key 沒有帶到的話，那 spring boot 就會將這個 key 所對應的變數值設成是 null\n讓驗證請求參數(EX:@NotNull)註解生效的作法 在參數前面加上 @Valid 在 Class 上加上 @Validated 4-9 章 @RequestHeader 用法:只能加在方法的參數上 用途:取得 request header 裡面的參數 requestHeader 主要是放上比較通用的資訊 GET 跟 POST 都可以帶上 requestHeader 的 @RequestHeader 可使用設定 name(or value):指定 request header 的 header 名字 在 @RequestHeader 裡面這個設定 name 的方法很常被使用，因為在 request header 裡面通常 header 的名字中間會帶有一個 - ，那在 Java 裡面是不支援變數名稱帶有 - 的，所以為了能夠在 spring boot 程式裡面去取得 request header 的值，在使用@RequestHeader 時就會去加上這個 name 的設定，讓我們可以順利去取得中間帶有 - 的那些 header required:是否是必須的參數? 預設是 true，可以改成 false defaultValue:required=false 的加強版，提供預設值 常見的 request header 4-10 章 @PathVariable 用法:只能加在方法的參數上 用途:取得 url 路徑 的值 加上 @PathVariable 的這個參數，他必須要跟 @RequestMapping 裡面寫在 { } 裡面的這個變數名稱要一樣才行 @RequestParam 和 @PathVariable 差異 4-11 章 Rest 風格 目的:簡化溝通成本 如果你所設計的 API 符合 REST 風格，那麼你所設計的 API 就是RESTful API 如何創造好的 Restful API 步驟 使用 http method 表示動作 使用 url 路徑描述資源之間的階層關係 response body 返回 json 或是 xml 格式 4-13 章 Spring Boot 中驗證請求參數的註解 註解 詳細資訊 @NotNull 不能為 null @NotBlank 不能為 null、且不能為空白的字串，用在驗證 String 類型的參數上 @NotEmpty 不能為 null、且 size 必須\u0026gt;0，用在驗證集合類型 (List、Set、Map) 的參數上 @Min(value) 值必須\u0026gt;=value，用在驗證數字類型的參數上 @Max(value) 值必須\u0026lt;=value，用在驗證數字類型的參數上 @Size(min,max) min\u0026lt;=字串長度 or 集合的 size \u0026lt;=max，可以只設 max or min @Email 必須符合電子郵件的格式 @Pattern(regexp) 必須符合正規表達式 regexp @Past 必須比當前時間早，也就是被註解的參數必須是以前的時間 @Future 必須比當前時間晚，也就是被註解的參數必須是未來的時間 @AssertTrue 必須是 true，用在驗證 boolean 類型的參數上 @AssertFalse 必須是 false，用在驗證 boolean 類型的參數上 @Null 必須為 null 例子 4-14 章 Http status code (Http 狀態碼) 用來表示這次 http 請求的結果為和\n可以根據首位數字分成五大類\n1xx - 資訊 無常見的狀態碼 2xx - 成功 Http 狀態碼 代表的意思 200 OK 請求成功 201 Created 請求成功且新的資源成功被創建，通常用在 POST 的 response 202 Accepted 請求已經接受，但尚未處理完成 3xx - 重新導向 Http 狀態碼 代表的意思 301 Moved Permanently 永久性重新導向，新的 url 應放在 response header 的 \u0026ldquo;Location\u0026rdquo; 中返回。通常會用在網頁班加上 302 Found 臨時重新導向，新的臨時性的 url 應放在 response header 的 \u0026ldquo;Location\u0026rdquo; 中返回 4xx - 前端請求錯誤 Http 狀態碼 代表的意思 400 Bad Request 前端的請求參數有錯誤(例如:前端傳給後端的參數名稱不同、請求的格式有問題) 401 Unauthorized 沒有通過身分驗證 403 Forbidden 請求被後端拒絕，通常是權限不足導致的 404 Not Found 網頁不存在，可能是資源被移走或是 url 輸入錯誤 5xx - 後端處理有問題 Http 狀態碼 代表的意思 500 Internal Server Error 後端在執行程式時發生錯誤，可能是程式內有 bug 導致的 503 Service Unavailable 由於臨時維護或者流量太大，後端目前沒有辦法處理請求 504 Gateway Timeout 請求超時 ResponseEntity 用法:作為方法的返回類型 用途:自定義回傳的 http response 的細節 4-15 章 @Controller 用法:只能加在 class 上 用途:將這個 class 變成一個 bean，並且可以在內部使用 @ExceptionHandler @ExceptionHandler 用法:只能加在方法上 用途:去 catch 方法所噴出的 Exception 在做 @ExceptionHandler 時，如果沒有明確指定這個 exception 要做甚麼樣的錯誤訊息，就會透過 exception 的繼承關係一層一層去找\n一般來說，我們只要寫到 Exception 這個 class 就好了，因為這樣就可以去涵蓋到所有程式相關的錯誤，不需要特別去寫到 Throwable 層級，因為 error 那邊的錯誤，是無法透過 spring boot 本身的程式來解決的\n使用 @ControllerAdvice 的好處 - 統一管理 Exception ","permalink":"https://john0212.github.io/blog/ch4/","tags":["Java","Spring Boot"],"title":"Spring MVC 重點"},{"categories":["個人筆記"],"contents":"3-2 章 如果要在 spring boot 中使用 spring AOP(Aspect-Oriented Programming,切面導向程式設計) 的話，就要使用到 @Aspect 註解\nAOP 概念就是將所有方法都要執行的共同邏輯，去統一的寫在切面裡面，並且讓這個切面去橫貫所有的方法，替所有的方法去執行這個共同邏輯\n@Aspect 用法:加在 class 上 (需和 @Component 一起使用，也就是這個 class 必須要先成為一個 bean，他才能成為一個切面) 用途:宣告這個 class 是一個切面 @Before 用法:加在切面 class 的方法上 用途:再切入點的方法執行前執行 @After 用法:加在切面 class 的方法上 用途:再切入點的方法執行後執行 @Around 用法:加在切面 class 的方法上 用途:再切入點的方法執行前、後執行 除了上面幾個較常用的註解外，還有一些比較不常用的，像是\n@AfterThrowing : 再切入點的方法拋出異常後執行\n@AfterReturning : 再切入點的方法執行成功後執行\n常見的切入點表達式 Spring AOP 的發展 權限驗證 Spring Security 統一的 Exception 處理 @ControllerAdvice Log 記錄 ","permalink":"https://john0212.github.io/blog/ch3/","tags":["Java","Spring Boot"],"title":"Spring Boot AOP 重點"},{"categories":["個人筆記"],"contents":"2-2 章 @component 用法:只能加在 class 上 用途:將該 class 變成由 Spring 容器所管理的 object ，那這些 object 會被稱作為 bean(這個 bean 名字為 class name 的第一個字母轉小寫) 專有名詞 Ioc(Inversion of Control)控制反轉:會將 object 存放在 spring 容器裡面 DI(Dependency Injection)依賴注入:會讓我們去取得存放在 spring 容器裡面的那些 object bean:存放在 spring 容器裡的 object @Autowired:加在變數上，取得 spring 容器中的 bean 2-3 章 @Autowired 用法:通常加在 class 變數上 用途:根據變數的類型，去 spring 容器中尋找有沒有符合類型的 bean @Qualifier 用法:通常是加在 class 變數上，會跟@Autowired 一起使用 用途:指定要載入的 bean 的名字 2-4 章 Bean 的創建方式，這兩個是可以同時使用的 在 class 上加上@Component 註解 使用@Configuration+@Bean 註解 @Configuration 用法:只能加在class上 用途:spring 中的設定用註解，表示這個 class 是拿來設定 spring 用的 @Bean 用法:只能加在帶有 @Configuration class 的方法上 用途:在 spring 容器中創建一個 bean 2-5 章 spring 中初始化 bean 的方法，一次只要選一種使用就好 使用@PostConstruct(較常用)，有幾個細節要注意 方法一定要為 public 返回類型一定要是 void 方法名字可以隨意取 不能有參數 @PostConstruct public void initialize() { // 要做的事 } 實現 InitializingBean interface 的 afterPropertiesSet() 方法 // 要先實作 InitializingBean，之後去實作 afterPropertiesSet() method @Override public void afterPropertiesSet() throws Exception { // 要做的事 } 2-6 章 Bean 的生命週期重點 Bean 的生命週期 : 創建-\u0026gt;初始化-\u0026gt;可以被別人拿去使用 創建時若有依賴其他 Bean，則 Spring 會回過頭去 [創建+初始化] 那個被依賴的 Bean 不要寫出循環依賴的 code 2-7 章 Spring Boot 設定檔 - application.properties 用法:使用 properties 語法 (key=value) 用途:存放 Spring Boot 的設定值 @Value 用法:加在Bean或是設定 Spring 用的 class裡面的變數上 用途:讀取 Spring Boot 設定檔 (application.properties) 中指定的 Key 的值 使用@Value 有幾個重點要注意 可以加在帶有@Component 或@Configuration 上 格式必須為 ${key} 變數所使用的類型，必須要跟 Spring Boot 設定檔中那個 key 所對應的類型一樣才行 可以設定預設值。當找不到對應的 key 時，就會用此預設值。 ","permalink":"https://john0212.github.io/blog/ch2/","tags":["Java","Spring Boot"],"title":"Spring Boot IoC 重點"},{"categories":["個人筆記"],"contents":"內文(兩行中間要空一行才能在網頁也呈現空行的樣子)\nHello world\n我是 John\n一級標題 二級標題 Hello 在想要加粗體字的前後都加上兩個*就會變成粗體了\n在想要加粗體字的前後都加上一個*就會變成斜體了\n有序序列 第一 How are you 第二 無序序列 第一 Hi 3 引用 引用\n超連結 呈現的文字\n連去另一篇文章\n圖片 單行程式碼 我是阿柴，我喜歡學習hello\n多行程式碼 print(\u0026#34;Hello world\u0026#34;) print(\u0026#34;Hello John\u0026#34;) print(\u0026#34;Hello Mary\u0026#34;) print(\u0026#34;Hello Jack\u0026#34;) 表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 插入影片 Hugo 操作 想要把自己的個人網站發布到 Github Pages 的話，要在 cmd 上輸入 hugo，這樣就會產生出一個 public 的資料夾\n再把這資料夾裡的東西複製到 C:\\Users\\XXX\\Documents\\GitHub\\ 你的 repo ，然後再上傳到 github 就行了\n之後就能在網址上輸入 你的 github 帳號.github.io\n如何看自己選的 Hugo 主題有沒有辦法使用評論功能 在 config.toml 底下去找有沒有叫 disqusShortname 的東西，如果有就代表可以使用\n","permalink":"https://john0212.github.io/blog/test/","tags":["Hugo"],"title":"MarkDown語法練習及Hugo操作"}]